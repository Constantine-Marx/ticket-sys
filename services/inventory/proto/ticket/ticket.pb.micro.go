// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: ticket.proto

package ticket

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TicketService service

func NewTicketServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TicketService service

type TicketService interface {
	// 查询剩余票数
	GetAvailableTickets(ctx context.Context, in *GetAvailableTicketsRequest, opts ...client.CallOption) (*GetAvailableTicketsResponse, error)
	// 预订票
	BookTicket(ctx context.Context, in *BookTicketRequest, opts ...client.CallOption) (*BookTicketResponse, error)
	// 取消预订
	CancelBooking(ctx context.Context, in *CancelBookingRequest, opts ...client.CallOption) (*CancelBookingResponse, error)
}

type ticketService struct {
	c    client.Client
	name string
}

func NewTicketService(name string, c client.Client) TicketService {
	return &ticketService{
		c:    c,
		name: name,
	}
}

func (c *ticketService) GetAvailableTickets(ctx context.Context, in *GetAvailableTicketsRequest, opts ...client.CallOption) (*GetAvailableTicketsResponse, error) {
	req := c.c.NewRequest(c.name, "TicketService.GetAvailableTickets", in)
	out := new(GetAvailableTicketsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketService) BookTicket(ctx context.Context, in *BookTicketRequest, opts ...client.CallOption) (*BookTicketResponse, error) {
	req := c.c.NewRequest(c.name, "TicketService.BookTicket", in)
	out := new(BookTicketResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketService) CancelBooking(ctx context.Context, in *CancelBookingRequest, opts ...client.CallOption) (*CancelBookingResponse, error) {
	req := c.c.NewRequest(c.name, "TicketService.CancelBooking", in)
	out := new(CancelBookingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TicketService service

type TicketServiceHandler interface {
	// 查询剩余票数
	GetAvailableTickets(context.Context, *GetAvailableTicketsRequest, *GetAvailableTicketsResponse) error
	// 预订票
	BookTicket(context.Context, *BookTicketRequest, *BookTicketResponse) error
	// 取消预订
	CancelBooking(context.Context, *CancelBookingRequest, *CancelBookingResponse) error
}

func RegisterTicketServiceHandler(s server.Server, hdlr TicketServiceHandler, opts ...server.HandlerOption) error {
	type ticketService interface {
		GetAvailableTickets(ctx context.Context, in *GetAvailableTicketsRequest, out *GetAvailableTicketsResponse) error
		BookTicket(ctx context.Context, in *BookTicketRequest, out *BookTicketResponse) error
		CancelBooking(ctx context.Context, in *CancelBookingRequest, out *CancelBookingResponse) error
	}
	type TicketService struct {
		ticketService
	}
	h := &ticketServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TicketService{h}, opts...))
}

type ticketServiceHandler struct {
	TicketServiceHandler
}

func (h *ticketServiceHandler) GetAvailableTickets(ctx context.Context, in *GetAvailableTicketsRequest, out *GetAvailableTicketsResponse) error {
	return h.TicketServiceHandler.GetAvailableTickets(ctx, in, out)
}

func (h *ticketServiceHandler) BookTicket(ctx context.Context, in *BookTicketRequest, out *BookTicketResponse) error {
	return h.TicketServiceHandler.BookTicket(ctx, in, out)
}

func (h *ticketServiceHandler) CancelBooking(ctx context.Context, in *CancelBookingRequest, out *CancelBookingResponse) error {
	return h.TicketServiceHandler.CancelBooking(ctx, in, out)
}
